{
  "version": 3,
  "sources": ["../../vuetify/src/components/VDialog/VDialog.tsx"],
  "sourcesContent": ["// Styles\nimport './VDialog.sass'\n\n// Components\nimport { VDialogTransition } from '@/components/transitions'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VOverlay } from '@/components/VOverlay'\nimport { makeVOverlayProps } from '@/components/VOverlay/VOverlay'\n\n// Composables\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useScopeId } from '@/composables/scopeId'\n\n// Utilities\nimport { mergeProps, nextTick, onBeforeUnmount, ref, watch } from 'vue'\nimport { focusableChildren, genericComponent, IN_BROWSER, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { OverlaySlots } from '@/components/VOverlay/VOverlay'\n\nexport const makeVDialogProps = propsFactory({\n  fullscreen: Boolean,\n  retainFocus: {\n    type: Boolean,\n    default: true,\n  },\n  scrollable: Boolean,\n\n  ...makeVOverlayProps({\n    origin: 'center center' as const,\n    scrollStrategy: 'block' as const,\n    transition: { component: VDialogTransition },\n    zIndex: 2400,\n  }),\n}, 'VDialog')\n\nexport const VDialog = genericComponent<OverlaySlots>()({\n  name: 'VDialog',\n\n  props: makeVDialogProps(),\n\n  emits: {\n    'update:modelValue': (value: boolean) => true,\n    afterEnter: () => true,\n    afterLeave: () => true,\n  },\n\n  setup (props, { emit, slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const { scopeId } = useScopeId()\n\n    const overlay = ref<VOverlay>()\n    function onFocusin (e: FocusEvent) {\n      const before = e.relatedTarget as HTMLElement | null\n      const after = e.target as HTMLElement | null\n\n      if (\n        before !== after &&\n        overlay.value?.contentEl &&\n        // We're the topmost dialog\n        overlay.value?.globalTop &&\n        // It isn't the document or the dialog body\n        ![document, overlay.value.contentEl].includes(after!) &&\n        // It isn't inside the dialog body\n        !overlay.value.contentEl.contains(after)\n      ) {\n        const focusable = focusableChildren(overlay.value.contentEl)\n\n        if (!focusable.length) return\n\n        const firstElement = focusable[0]\n        const lastElement = focusable[focusable.length - 1]\n\n        if (before === firstElement) {\n          lastElement.focus()\n        } else {\n          firstElement.focus()\n        }\n      }\n    }\n\n    onBeforeUnmount(() => {\n      document.removeEventListener('focusin', onFocusin)\n    })\n\n    if (IN_BROWSER) {\n      watch(() => isActive.value && props.retainFocus, val => {\n        val\n          ? document.addEventListener('focusin', onFocusin)\n          : document.removeEventListener('focusin', onFocusin)\n      }, { immediate: true })\n    }\n\n    function onAfterEnter () {\n      emit('afterEnter')\n      if (\n        (props.scrim || props.retainFocus) &&\n        overlay.value?.contentEl &&\n        !overlay.value.contentEl.contains(document.activeElement)\n      ) {\n        overlay.value.contentEl.focus({ preventScroll: true })\n      }\n    }\n\n    function onAfterLeave () {\n      emit('afterLeave')\n    }\n\n    watch(isActive, async val => {\n      if (!val) {\n        await nextTick()\n        overlay.value!.activatorEl?.focus({ preventScroll: true })\n      }\n    })\n\n    useRender(() => {\n      const overlayProps = VOverlay.filterProps(props)\n      const activatorProps = mergeProps({\n        'aria-haspopup': 'dialog',\n      }, props.activatorProps)\n      const contentProps = mergeProps({\n        tabindex: -1,\n      }, props.contentProps)\n\n      return (\n        <VOverlay\n          ref={ overlay }\n          class={[\n            'v-dialog',\n            {\n              'v-dialog--fullscreen': props.fullscreen,\n              'v-dialog--scrollable': props.scrollable,\n            },\n            props.class,\n          ]}\n          style={ props.style }\n          { ...overlayProps }\n          v-model={ isActive.value }\n          aria-modal=\"true\"\n          activatorProps={ activatorProps }\n          contentProps={ contentProps }\n          height={ !props.fullscreen ? props.height : undefined }\n          width={ !props.fullscreen ? props.width : undefined }\n          maxHeight={ !props.fullscreen ? props.maxHeight : undefined }\n          maxWidth={ !props.fullscreen ? props.maxWidth : undefined }\n          role=\"dialog\"\n          onAfterEnter={ onAfterEnter }\n          onAfterLeave={ onAfterLeave }\n          { ...scopeId }\n        >\n          {{\n            activator: slots.activator,\n            default: (...args) => (\n              <VDefaultsProvider root=\"VDialog\">\n                { slots.default?.(...args) }\n              </VDefaultsProvider>\n            ),\n          }}\n        </VOverlay>\n      )\n    })\n\n    return forwardRefs({}, overlay)\n  },\n})\n\nexport type VDialog = InstanceType<typeof VDialog>\n"],
  "mappings": "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",
  "names": ["makeVDialogProps", "propsFactory", "fullscreen", "Boolean", "retainFocus", "type", "default", "scrollable", "makeVOverlayProps", "origin", "scrollStrategy", "transition", "component", "VDialogTransition", "zIndex", "VDialog", "genericComponent", "name", "props", "emits", "value", "afterEnter", "afterLeave", "setup", "_ref", "emit", "slots", "isActive", "useProxiedModel", "scopeId", "useScopeId", "overlay", "ref", "onFocusin", "e", "before", "relatedTarget", "after", "target", "contentEl", "globalTop", "document", "includes", "contains", "focusable", "focusableChildren", "length", "firstElement", "lastElement", "focus", "onBeforeUnmount", "removeEventListener", "IN_BROWSER", "watch", "val", "addEventListener", "immediate", "onAfterEnter", "scrim", "activeElement", "preventScroll", "onAfterLeave", "nextTick", "activatorEl", "useRender", "overlayProps", "VOverlay", "filterProps", "activatorProps", "mergeProps", "contentProps", "tabindex", "_createVNode", "_mergeProps", "class", "style", "$event", "height", "undefined", "width", "maxHeight", "maxWidth", "activator", "_len", "arguments", "args", "Array", "_key", "VDefaultsProvider", "forwardRefs"]
}
